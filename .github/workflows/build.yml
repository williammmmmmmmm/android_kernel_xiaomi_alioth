name: Build kernel

on:
  workflow_dispatch:

jobs:
  build-kernel:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Prepare host environment
        run: |
          echo "===================install star==================="
          sudo apt update -y
          sudo apt install -y bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick lib32readline-dev lib32z1-dev liblz4-tool libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev gnupg flex bison build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 libncurses6 libncursesw6 lib32ncurses-dev lib32ncurses6 lib32ncursesw6 libncurses5-dev lib32ncurses-dev x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev libxml2-utils xsltproc unzip fontconfig make python2
          sudo apt install -y neofetch

      - uses: actions/checkout@v3
        
      - name: Echo host details
        run: |
          neofetch

      - name: Prepare toolchains
        run: |
          echo "===================Setup Environment==================="
          {
          echo "KERNEL_PATH=$PWD"
          echo "ANYKERNEL_PATH=$HOME/Anykernel3"
          VERSION=$(head -n 5 Makefile | grep -e '^VERSION' | awk '{print $ NF}')
          PATCHLEVEL=$(head -n 5 Makefile | grep -e '^PATCHLEVEL' | awk '{print $ NF}')
          SUBLEVEL=$(head -n 5 Makefile | grep -e '^SUBLEVEL' | awk '{print $ NF}')
          echo "linux_version=$VERSION.$PATCHLEVEL.$SUBLEVEL"
          } >> "$GITHUB_ENV"
          git clone --depth=1 https://github.com/williammmmmmmmm/AnyKernel3_star "$HOME"/Anykernel3
          mkdir clang && wget https://github.com/XSans0/WeebX-Clang/releases/download/WeebX-Clang-17.0.0-release/WeebX-Clang-17.0.0.tar.gz && tar -C clang/ -zxvf *.tar.gz
          
      - name: Pull KSU
        run: |
          echo "=========================setup KernelSU========================="
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -
          cd KernelSU || exit 255
          {
          echo "KERNEL_NAME=K40Kernel-$(date +"%Y%m%d")-KSU($(( 10000 + $(git rev-list --count HEAD) + 200)))"
          echo "KSU_VERSION=$((10000 + $(git rev-list --count HEAD) + 200))"
          echo "KSU_tags=$(git describe --abbrev=0 --tags)"
          } >> "$GITHUB_ENV"
          cd "$KERNEL_PATH" || exit 255

      - name: Build
        run: |
          echo "=========================Build========================="
          export PATH=$GITHUB_WORKSPACE/clang/bin:${PATH}
          make LLVM=1 LLVM_IAS=1 O=out ARCH=arm64 SUBARCH=arm64 CC=clang LD=ld.lld alioth_lmperf_defconfig
          make -j$(nproc) LLVM=1 LLVM_IAS=1 O=out ARCH=arm64 SUBARCH=arm64 CC=clang LD=ld.lld CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi-
          find ./ -type f -name Image

      - name: Patch
        run: |
          echo "=========================Patch========================="
          rm -r "$ANYKERNEL_PATH"/modules "$ANYKERNEL_PATH"/patch "$ANYKERNEL_PATH"/ramdisk
          if [ -f "$KERNEL_PATH"/anykernel.sh ]; then cp "$KERNEL_PATH"/anykernel.sh "$ANYKERNEL_PATH"/; fi 
          cp "$KERNEL_PATH"/out/arch/arm64/boot/Image "$ANYKERNEL_PATH"/
          cd "$ANYKERNEL_PATH" || exit 255
          zip -r "$KERNEL_NAME" ./*
          mv "$KERNEL_NAME".zip "$KERNEL_PATH"/out/
          cd "$KERNEL_PATH" || exit 255
          rm -rf "$ANYKERNEL_PATH"
          echo "$KERNEL_NAME".zip

      - name: set env
        run: echo "NOW=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Create Release and Upload Release Asset
        uses: softprops/action-gh-release@v1
#       if: startsWith(github.ref, 'refs/tags/')
        with:
         tag_name: v${{ env.NOW }}-${{ env.linux_version }}-${{ env.KSU_VERSION}}
         name: Release Linux ${{ env.linux_version }} kernel for Redmi K40 (alioth) in ${{ env.NOW }} with KSU ${{ env.KSU_VERSION}}
         body: this is K40  kernel whth KernelSU ${{ env.KSU_VERSION}} image. KSU_tags is ${{ env.KSU_tags}}
         draft: false
         prerelease: false
         files: |
           out/arch/arm64/boot/Image
           out/K40Kernel-*.zip

          
